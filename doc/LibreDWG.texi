\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename LibreDWG.info
@include version.texi
@settitle LibreDWG @value{VERSION}

@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex vr cp
@syncodeindex fn cp
@c %**end of header

@copying
This manual is for GNU LibreDWG (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2010, 2015, 2018 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Libraries
@direntry
* LibreDWG: (LibreDWG).         Free implementation of the DWG file format.
@end direntry

@titlepage
@title GNU LibreDWG
@subtitle for version @value{VERSION}, @value{UPDATED}
@c Hey, if you can change this, you can comment in the next line!
@author GNU LibreDWG Developers
@author and Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top
@top GNU LibreDWG

@insertcopying
@end ifnottex

@menu
* Overview::            General purpose and information.
* Usage::               How to use LibreDWG.
* Types::               Enums, structs.
* Constants::           Value macros, invariably.
* Functions::           Call them.
* Programs::            Useful binaries.

* Reporting bugs::      Sending bug reports and feature suggestions.
* GNU Free Documentation License:: Copying and sharing this documentation.
* Index::
@end menu


@node Overview
@chapter Overview

@cindex overview
@cindex dwg file format
@cindex license

LibreDWG is a free C library to read and write @dfn{DWG files}.
The DWG file format was created in the 1970s for the then-emerging
CAD applications.

This library is part of the GNU project, released under the aegis of
GNU.  It is made available under GPLv3+, i.e., under the terms of the
GNU General Public License version 3, or (at your option) any later
version.

It came out of code from the QCad Community Edition product from
Ribbonsoft.

@section API/ABI version

@cindex version, API/ABI

LibreDWG @value{VERSION} provides the API/ABI version 1.
We hope that this doesn't need to change much in the future.
@ignore
In the past, these were released:

@table @code
@c [???] For first release, there is no history.  However, might me want
@c to describe the difference between LibreDWG and LibDWG here?  --ttn
@item 0
...
@end table
@end ignore

@section Coverage

@cindex coverage

Because the DWG file format is not open, its specification had to be
reverse-engineered.  The specification is almost complete.
The LibreDWG implementation of the specification is an ongoing process;
as of version @value{VERSION}, coverage is approximately 99%.

It can read the formats R13, R14, R2000, R2004 and R2007 for 99%.
R11, R2010, R2013 and R2018 can be partially read (~80%).

Here is a list of features that are still missing.

@cindex features, still missing

@table @asis

@item Reading pre-R13 and R2010+ DWG
Reading DWG formats for pre-R13 and R2010 and later - R2013, R2018 - is an ongoing effort, some minor parts are missing.

@item Writing pre-R13 and R2004+ DWG
Writing DWG formats for R2004 and later: R2007, R2010, R2013, R2018 is an ongoing effort and not yet implemented.

@item Reading and writing ASCII and binary DXF
DXF support is an ongoing effort, and about halfway implemented.

@end table

See also the @file{TODO} file in the source distribution.

@section Related projects

@cindex projects, related

Some projects that use DWG (and specifically LibreDWG) are:

@table @asis
@item GRASS GIS
http://grass.osgeo.org/
@end table

Related libraries:

@table @asis
@item libdwg
The old version (documented in Esperanto) which was forked to LibreDWG in 2009.
But in the meantime it got a DXF reader.
@item libdxfrw
Read the DWG format for all versions but with much less elements, only those needed for DXF.
Written in C++, under the GPLv2 license.
@item OpenDWG
The OpenDWG's license does not allow the usage in free software projects.
@end table

The 2009 license update of LibreDWG to the version 3 of the GNU GPL
made it impossible for the free software projects LibreCAD and FreeCAD
to use LibreDWG.

Compared to libdwg and libdxfrw, LibreDWG can read and write much more details,
but still fails to read newer DWG's.

@node Usage
@chapter Usage

@cindex header
@cindex compilation
@cindex linking

This chapter describes how to compile and link a program against
LibreDWG.  To access LibreDWG interface elements (@pxref{Types},
@pxref{Constants}, @pxref{Functions}), include its header file
in the C code.

@example
#include <dwg.h>
@end example

Optionally you can also use the 
@example
#include <dwg_api.h>
@end example
API.

@noindent
Make sure you specify @samp{-lredwg} when linking,
such as in this @file{Makefile.am} fragment:

@example
AM_LDFLAGS += -lredwg
@end example

@noindent
Note that the shared object library is named @file{libredwg} (with some
system-specific extension, e.g., @file{.so}), so you do @strong{not}
want to specify @code{-llibredwg}, as that would (try to) link against
@file{liblibredwg} and fail.


@node Types
@chapter Types

@cindex data types
@cindex enums
@cindex structs

LibreDWG types map closely to the type system of the DWG file format.
This chapter describes the enums and structs used to define the constants
(@pxref{Constants}), and passed around the functions (@pxref{Functions}).

@deftypevr {define} BITCODE_RC char
1 raw signed char
@end deftypevr
@deftypevr {define} BITCODE_RS short
1 raw unsigned short int
@end deftypevr
@deftypevr {define} BITCODE_RL long
1 raw unsigned long int
@end deftypevr
@deftypevr {define} BITCODE_RD double
1 raw IEEE-754 double
@end deftypevr
@deftypevr {define} BITCODE_B byte
1 bit
@end deftypevr
@deftypevr {define} BITCODE_BB byte
2 bits
@end deftypevr
@deftypevr {define} BITCODE_3B byte
1-3 bits
@end deftypevr
@deftypevr {define} BITCODE_4BITS byte
4 bits (for VIEW view_mode)
@end deftypevr
@deftypevr {define} BITCODE_BS short
1 bit-encoded unsigned short
@end deftypevr
@deftypevr {define} BITCODE_BL long
1 bit-encoded unsigned long
@end deftypevr
@deftypevr {define} BITCODE_BLL uint64_t
1 bit-encoded unsigned 64bit long
@end deftypevr
@deftypevr {define} BITCODE_BD double
1 bit-encoded double
@end deftypevr
@deftypevr {define} BITCODE_DD double
1 bit-encoded double with default
@end deftypevr
@deftypevr {define} BITCODE_MC long int
1 modular char, max 4 bytes
@end deftypevr
@deftypevr {define} BITCODE_MS long unsigned int
1 modular short, max 2 words
@end deftypevr
@deftypevr {define} BITCODE_BE double[3]
1 bitencoded extrusion vector
@end deftypevr
@deftypevr {define} BITCODE_BT double
1 bitencoded thickness value
@end deftypevr
@deftypevr {define} BITCODE_TV char*
length + ASCIIZ string
@end deftypevr
@deftypevr {define} BITCODE_H void*
handle-references
@end deftypevr
@deftypevr {define} BITCODE_L long int
1 raw LE-encoded long
@end deftypevr
@deftypevr {define} BITCODE_CMC double[4]
1 encoded Dwg_Color struct
@end deftypevr
[and some more]

@cindex return code
@cindex code, return
@cindex error code
@cindex code, error

Two types that do not derive from the type system of the DWG file format
are the enums for return codes and error codes.

Esp. on 32-bit and windows systems ensure that you define
@code{HAVE_STDINT_H} and @code{HAVE_INTTYPES_H} before including
@file{dwg.h} to use the proper C99 @code{int32_t},... types, and not
just the native fallback types int/long, which are different across
platforms.  Or include @file{<stdint.h>} and @file{<inttypes.h>} by
your own before @file{dwg.h}.
With the GNU autotools this usually happens automatically.

@node Constants
@chapter Constants

@cindex constants

This chapter describes the constant objects used in LibreDWG.

@deftypevr {Constant} {(void *)} NULL
This is the standard value for a pointer that points nowhere.
You should avoid dereferencing a variable that holds @code{NULL}.
In fact, that's good advice for LibreDWG, too!
If you notice LibreDWG segfaulting, that's a bug.
@xref{Reporting bugs}.
@end deftypevr

[??? TODO]

@node Functions
@chapter Functions

@cindex functions

You can use LibreDWG immediately upon loading, without any particular
initialization.  You usually use one set of functions - either decoding
or encoding - at a time.  All functions use the common data types
(@pxref{Types}) and constants (@pxref{Constants}).

@menu
* Decoding::                    Functions on the read path.
* Encoding::                    Functions on the write path.
@end menu


@node Decoding
@section Decoding

@cindex functions, decoding
@cindex functions, read path

The highest level function for decoding a file is @strong{@code{dwg_read_file}}.

@deftypefn {Function} int dwg_read_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and decode it, saving information into @var{dwg}.
Return 0 if successful.
@end deftypefn

You can then iterate over the entities in model space or paper space
via two ways:

1. by using the @file{dwg.h} data structures, via @code{dwg->object[0]}, which is of
   type @code{DWG_TYPE_BLOCK_CONTROL},
   and a custom @code{void process_BLOCK_HEADER((Dwg_Object_Ref* ref)}:

@verbatim
  Dwg_Object_BLOCK_CONTROL* block_control = dwg->object[0]->tio.object->tio.BLOCK_CONTROL;

  // optional
  for (i=0; i < block_control->num_entries; i++)
    {
      process_BLOCK_HEADER(block_control->block_headers[i]);
    }

  process_BLOCK_HEADER(block_control->model_space);
  process_BLOCK_HEADER(block_control->paper_space);
@end verbatim

or 2. by using the API functions from @file{dwg_api.h}:

@verbatim
  int error;
  dwg_obj_block_header *hdr = dwg_get_block_header(dwg, &error);
  dwg_obj_block_control *ctrl = dwg_block_header_get_block_control(hdr, &error);

  // optional
  dwg_object_ref **hdr_refs = dwg_obj_block_control_get_block_headers(ctrl, &error);
  long num_hdr_objs = dwg_obj_block_control_get_num_entries(ctrl, &error);
  for (i=0; i < num_hdr_objs; i++)
    {
      process_BLOCK_HEADER(hdr_refs[i]);
    }

  process_BLOCK_HEADER(dwg_obj_block_control_get_model_space(ctrl, &error));
  process_BLOCK_HEADER(dwg_obj_block_control_get_paper_space(ctrl, &error));
@end verbatim

and inside the @code{process_BLOCK_HEADER} function, you iterate over the objects
from the header ref via:

@verbatim
  Dwg_Object_BLOCK_HEADER* hdr = ref->obj->tio.object->tio.BLOCK_HEADER;
  Dwg_Object* obj = get_first_owned_object(ref->obj, hdr);
  while (obj)
    {
      process_object(obj);
      obj = get_next_owned_object(ref->obj, obj, hdr);
    }
@end verbatim

where @code{process_object} checks the type of each object or entity under the
@var{Dwg_Object* obj}.

@node Encoding
@section Encoding

@cindex functions, encoding
@cindex functions, write path

Encoding DWG files is optional and needs to be enabled with
@code{./configure --enable-write}.

The highest level function for encoding a bitstream to a file is @code{dwg_write_file}.

@deftypefn {Function} int dwg_write_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and write the @var{dwg} to it.
Return 0 if successful.
@end deftypefn

The iterator is similar to above, but you want to encode all data structures, not just the
entities.

@node Programs
@chapter Programs

@cindex programs

LibreDWG installs some binary programs to read or write DWG files.

@table @asis

@item @file{dwgread}

This is mostly used with @code{--enable-trace} and @code{LIBREDWG_TRACE=n} to debug
the decoded contents of the DWG.

@item @file{dwgrewrite}

Read and write the DWG, optionally via @code{--as-rNNNN} as another
version, an earlier or later version.

@item @file{dwg2SVG}
Convert a DWG to a limited SVG. All paperspace and modelspace enties of type:
TEXT, LINE, CIRCLE, ARC, INSERT.

@item @file{dwg2ps}
Convert a DWG to a limited Postscript file. All paperspace and modelspace enties of type LINE.

@item @file{dwg2dxf}

Convert a DWG to DXF, optionally via @code{--as-rNNNN} as another
version, an earlier or later version, or via @code{-m} or
@code{--minimal} as a minimal DXF version, skipping most headers vars,
classes, tables and objects.
@code{--binary} as a binary DXF file, with full precision.
Some parts of the DXF writers are not yet implemented.

@item @file{dxf2dwg}

Convert a DXF to DWG, optionally via @code{--as-rVER} as another
version, an earlier or later version.
The DXF reader is not yet implemented.

@end table

There are also some more examples in the source distribution:

@file{load_dwg} loads a DWG and adds some entities.

@file{dwg2svg2} converts a DWG to SVG similar to @file{dwg2SVG},
but via the @file{dwg_api.h} only.

@node Reporting bugs
@chapter Reporting bugs

@cindex bug reporting
@cindex problems
@cindex reporting bugs

To report bugs or suggest enhancements for GNU LibreDWG, please
``submit a bug'' at
@uref{http://savannah.gnu.org/projects/libredwg, Savannah}
or send electronic mail to @email{libredwg@@gnu.org}.
(If you use the web interface, you don't need to also send email,
since that is done automatically.)
Pull requests at the github mirror at 
@uref{http://github.org/rurban/libredwg, Github} are also accepted for now.

@cindex checklist for bug reports
For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item The version numbers of LibreDWG and any other program(s) or manual(s) involved.
@item Hardware and operating system names and versions.
@item The contents of any input files necessary to reproduce the bug.
@item The expected behavior and/or output.
@item A description of the problem and samples of any erroneous output.
@item Options you gave to @command{configure} other than specifying
      installation directories.
@item Anything else that you think would be helpful.
@end itemize

When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

@cindex patches, contributing
Patches are welcome; if possible, please make them with
@samp{git format-patch} and
include @file{ChangeLog} entries (@pxref{Change Log,,, emacs, The GNU
Emacs Manual}).  Please follow the existing GNU coding conventions.
See @file{CONTRIBUTING} in the source distribution.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi
@include version.texi

@node Index
@unnumbered Index

@printindex cp

@bye
